---
name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
env:
  KUBECTL_VERSION: 1.29.5
  KUTTL_VERSION: 0.22.0
  K3D_VERSION: 5.8.3
  TOOLS_PATH: "/opt/tools/bin"
jobs:
  golang-tests:
    name: Go unit tests
    timeout-minutes: 30
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run tests
        run: |
          make test

  integration-core-tests:
    name: Integration core tests
    timeout-minutes: 30
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Install TOOLS_PATH
        run: |
          mkdir -p $TOOLS_PATH
          echo $TOOLS_PATH >> $GITHUB_PATH

      - name: Install Kubernetes tools
        run: |
          # Kubectl
          curl -s -L -o ${TOOLS_PATH}/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl 
          chmod +x ${TOOLS_PATH}/kubectl
          kubectl version --client --output=yaml
          # Kuttl
          curl -s -L -o ${TOOLS_PATH}/kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v${KUTTL_VERSION}/kubectl-kuttl_${KUTTL_VERSION}_linux_x86_64  
          chmod +x ${TOOLS_PATH}/kubectl-kuttl
          echo $(kubectl kuttl --version) installed
          # K3D
          curl -s -L -o ${TOOLS_PATH}/k3d https://github.com/k3d-io/k3d/releases/download/v${K3D_VERSION}/k3d-linux-amd64
          chmod +x ${TOOLS_PATH}/k3d
          k3d version

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Create K3D cluster
        run: |
          sudo modprobe br_netfilter
          make k3d-cluster-up

      - name: Run core tests
        run: |
            make test-integration-core

  integration-features-tests:
    name: Integration features tests
    timeout-minutes: 30
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Install TOOLS_PATH
        run: |
          mkdir -p $TOOLS_PATH
          echo $TOOLS_PATH >> $GITHUB_PATH

      - name: Install Kubernetes tools
        run: |
          # Kubectl
          curl -s -L -o ${TOOLS_PATH}/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl 
          chmod +x ${TOOLS_PATH}/kubectl
          kubectl version --client --output=yaml
          # Kuttl
          curl -s -L -o ${TOOLS_PATH}/kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v${KUTTL_VERSION}/kubectl-kuttl_${KUTTL_VERSION}_linux_x86_64  
          chmod +x ${TOOLS_PATH}/kubectl-kuttl
          echo $(kubectl kuttl --version) installed
          # K3D
          curl -s -L -o ${TOOLS_PATH}/k3d https://github.com/k3d-io/k3d/releases/download/v${K3D_VERSION}/k3d-linux-amd64
          chmod +x ${TOOLS_PATH}/k3d
          k3d version

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Create K3D cluster
        run: |
          sudo modprobe br_netfilter
          make k3d-cluster-up

      - name: Run features tests
        run: |
          make test-integration-features

  integration-operator-upgrade-tests:
    name: Integration operator upgrade tests
    timeout-minutes: 30
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Install TOOLS_PATH
        run: |
          mkdir -p $TOOLS_PATH
          echo $TOOLS_PATH >> $GITHUB_PATH

      - name: Install Kubernetes tools
        run: |
          # Kubectl
          curl -s -L -o ${TOOLS_PATH}/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl 
          chmod +x ${TOOLS_PATH}/kubectl
          kubectl version --client --output=yaml
          # Kuttl
          curl -s -L -o ${TOOLS_PATH}/kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v${KUTTL_VERSION}/kubectl-kuttl_${KUTTL_VERSION}_linux_x86_64  
          chmod +x ${TOOLS_PATH}/kubectl-kuttl
          echo $(kubectl kuttl --version) installed
          # K3D
          curl -s -L -o ${TOOLS_PATH}/k3d https://github.com/k3d-io/k3d/releases/download/v${K3D_VERSION}/k3d-linux-amd64
          chmod +x ${TOOLS_PATH}/k3d
          k3d version

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Create K3D cluster
        run: |
          sudo modprobe br_netfilter
          make k3d-cluster-up

      - name: Run operator upgrade tests
        run: |
          make test-integration-operator-upgrade

  eks-e2e-tests:
    name: E2E tests (EKS)
    if: contains(github.event.pull_request.labels.*.name, 'test/e2e') || contains(github.event.pull_request.labels.*.name, 'test/e2e-operator-upgrade') || contains(github.event.pull_request.labels.*.name, 'test/e2e-core') || contains(github.event.pull_request.labels.*.name, 'test/e2e-db-upgrade')
    timeout-minutes: 80
    concurrency: eks-e2e-tests
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Install TOOLS_PATH
        run: |
          mkdir -p $TOOLS_PATH
          echo $TOOLS_PATH >> $GITHUB_PATH

      - name: Install Kubernetes tools
        run: |
          # Kubectl
          curl -s -L -o ${TOOLS_PATH}/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl 
          chmod +x ${TOOLS_PATH}/kubectl
          kubectl version --client --output=yaml
          # Kuttl
          curl -s -L -o ${TOOLS_PATH}/kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v${KUTTL_VERSION}/kubectl-kuttl_${KUTTL_VERSION}_linux_x86_64  
          chmod +x ${TOOLS_PATH}/kubectl-kuttl
          echo $(kubectl kuttl --version) installed

      - name: Install EKS tools
        run: |
          # Install EKSCTL
          ARCH=amd64
          PLATFORM=$(uname -s)_${ARCH}
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_${PLATFORM}.tar.gz"
          tar -xzf eksctl_${PLATFORM}.tar.gz -C "${TOOLS_PATH}"
          chmod +x "${TOOLS_PATH}"/eksctl

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Build operator
        run:
          make build

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.EVEREST_EKS_E2E_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.EVEREST_EKS_E2E_IAM_USER_ACCESS_KEY_SECRET }}
          aws-region: us-east-2

      - name: Update EKS kubeconfig
        run: |
          aws eks update-kubeconfig --name everest-e2e-dev-eks-cluster

      - name: Scale up cluster
        # Only the following E2E tests require EKS:
        # - test/e2e
        # - test/e2e-core
        # - test/e2e-db-upgrade
        # - test/e2e-operator-upgrade
        # TODO: Review this condition once we have more tests running on KinD.
        if: contains(github.event.pull_request.labels.*.name, 'test/e2e') || contains(github.event.pull_request.labels.*.name, 'test/e2e-core') || contains(github.event.pull_request.labels.*.name, 'test/e2e-db-upgrade') || contains(github.event.pull_request.labels.*.name, 'test/e2e-operator-upgrade')
        run: |
          eksctl scale nodegroup --cluster="$CLUSTER_NAME" --nodes=10 "$NODEPOOL_NAME" --wait
        env:
          CLUSTER_NAME: "everest-e2e-dev-eks-cluster"
          NODEPOOL_NAME: "everest-e2e-dev-eks-workers-glowworm"

      - name: Run operator upgrade tests
        if: contains(github.event.pull_request.labels.*.name, 'test/e2e') || contains(github.event.pull_request.labels.*.name, 'test/e2e-operator-upgrade')
        run: |
          make test-e2e-operator-upgrade

      - name: Clean up custom resources
        if: always()
        continue-on-error: true
        # If this does not finish in 10 minutes, it's stuck with some resource having a finalizer.
        timeout-minutes: 10
        run: |
          make cluster-cleanup

      - name: Run core tests
        if: contains(github.event.pull_request.labels.*.name, 'test/e2e') || contains(github.event.pull_request.labels.*.name, 'test/e2e-core')
        run: |
          make test-e2e-core

      - name: Clean up custom resources
        if: always()
        run: |
          make cluster-cleanup

      - name: Run db upgrade tests
        if: contains(github.event.pull_request.labels.*.name, 'test/e2e') || contains(github.event.pull_request.labels.*.name, 'test/e2e-db-upgrade')
        run: |
          make test-e2e-db-upgrade

      - name: Clean up custom resources
        if: always()
        run: |
          make cluster-cleanup

      - name: Scale down cluster
        if: always()
        run: |
          eksctl scale nodegroup --cluster="$CLUSTER_NAME" --nodes=0 "$NODEPOOL_NAME"
        env:
          CLUSTER_NAME: "everest-e2e-dev-eks-cluster"
          NODEPOOL_NAME: "everest-e2e-dev-eks-workers-glowworm"

      - name: Clean up resources and CRDs
        if: always()
        run: |
          make cluster-cleanup

  k3d-e2e-tests:
    name: E2E tests (K3D)
    if: contains(github.event.pull_request.labels.*.name, 'test/e2e') || contains(github.event.pull_request.labels.*.name, 'test/e2e-data-importer')
    timeout-minutes: 80
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Install TOOLS_PATH
        run: |
          mkdir -p $TOOLS_PATH
          echo $TOOLS_PATH >> $GITHUB_PATH

      - name: Install Kubernetes tools
        run: |
          # Kubectl
          curl -s -L -o ${TOOLS_PATH}/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl 
          chmod +x ${TOOLS_PATH}/kubectl
          kubectl version --client --output=yaml
          # Kuttl
          curl -s -L -o ${TOOLS_PATH}/kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v${KUTTL_VERSION}/kubectl-kuttl_${KUTTL_VERSION}_linux_x86_64  
          chmod +x ${TOOLS_PATH}/kubectl-kuttl
          echo $(kubectl kuttl --version) installed
          # K3D
          curl -s -L -o ${TOOLS_PATH}/k3d https://github.com/k3d-io/k3d/releases/download/v${K3D_VERSION}/k3d-linux-amd64
          chmod +x ${TOOLS_PATH}/k3d
          k3d version

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      # Switch docker data directory to /mnt to have more space for the local Kubernetes cluster
      - name: Switch docker-daemon data directory to /mnt
        run: |
          sudo systemctl stop docker
          echo '{ "exec-opts": ["native.cgroupdriver=cgroupfs"], "cgroup-parent": "/actions_job", "data-root": "/mnt/docker-data" }' | sudo tee /etc/docker/daemon.json
          sudo mkdir /mnt/docker-data
          sudo systemctl start docker

      # https://github.com/NixOS/nixpkgs/issues/98766#issuecomment-714757707
      - name: Create K3D cluster
        run: |
          sudo modprobe br_netfilter
          make k3d-cluster-up

      - name: Run data importer tests
        run: |
          make test-e2e-data-importer

  make-bundle:
    name: Make Bundle
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Install operator-sdk
        run: |
          make operator-sdk

      - name: Make bundle and build bundle image
        run: |
          make bundle bundle-build
