apiVersion: kuttl.dev/v1
kind: TestAssert
timeout: 2
commands:
  # After the operator is installed, we can check the available versions match the expected versions from Version Service
  - script: >
      bash -c "
        diff                                                                                        \
        <(                                                                                          \
          kubectl get dbengine/percona-xtradb-cluster-operator -n ${NAMESPACE} -o yaml |              \
          yq -P '.status | sort_keys(..)'                                                           \
        )                                                                                           \
        <(                                                                                          \
          curl -fsSL https://check-dev.percona.com/versions/v1/pxc-operator/${PXC_OPERATOR_VERSION} | \
          yq -P '
            .versions[] |
            {
                \"status\": \"installed\",
                \"operatorVersion\": .operator,
                \"availableVersions\": {
                    \"engine\":
                        .matrix.pxc | to_entries.[] | select(.key != \"5.7*\") as \$item ireduce({};
                            .[\$item.key] = {
                                \"imageHash\": \$item.value.imageHash,
                                \"imagePath\": \$item.value.imagePath,
                                \"status\": \$item.value.status
                            }
                        ),
                    \"backup\":
                        .matrix.backup | to_entries.[] as \$item ireduce({};
                            .[\$item.key] = {
                                \"imageHash\": \$item.value.imageHash,
                                \"imagePath\": \$item.value.imagePath,
                                \"status\": \$item.value.status
                            }
                        ),
                    \"proxy\": {
                        \"haproxy\":
                            .matrix.haproxy | to_entries.[] as \$item ireduce({};
                               .[\$item.key] = {
                                   \"imageHash\": \$item.value.imageHash,
                                   \"imagePath\": \$item.value.imagePath,
                                   \"status\": \$item.value.status
                               }
                            ),
                        \"proxysql\":
                            .matrix.proxysql | to_entries.[] as \$item ireduce({};
                               .[\$item.key] = {
                                   \"imageHash\": \$item.value.imageHash,
                                   \"imagePath\": \$item.value.imagePath,
                                   \"status\": \$item.value.status
                               }
                            )
                    },
                    \"tools\": {
                        \"logCollector\":
                            .matrix.logCollector | to_entries.[] as \$item ireduce({};
                               .[\$item.key] = {
                                   \"imageHash\": \$item.value.imageHash,
                                   \"imagePath\": \$item.value.imagePath,
                                   \"status\": \$item.value.status
                               }
                            )
                    }
                }
            } |
            sort_keys(..)
          '                                                                                         \
        )                                                                                           \
      "
