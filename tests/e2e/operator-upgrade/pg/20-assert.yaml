apiVersion: kuttl.dev/v1
kind: TestAssert
# We use a very short timeout here because we already actively waited in this TestStep to ensure that the DB wasn't restarted so these manifest must be applied by now.
timeout: 2
commands:
  - command: kubectl wait --for=jsonpath='{.spec.crVersion}'=$PREVIOUS_PG_OPERATOR_VERSION pg/test-pg-cluster -n $NAMESPACE
  - command: kubectl wait --for=jsonpath='{.status.recommendedCRVersion}'=$PG_OPERATOR_VERSION db/test-pg-cluster -n $NAMESPACE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: percona-postgresql-operator
status:
  availableReplicas: 1
  observedGeneration: 2
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
---
apiVersion: everest.percona.com/v1alpha1
kind: DatabaseCluster
metadata:
  name: test-pg-cluster
spec:
  engine:
    replicas: 2
    storage:
      size: 1G
    type: postgresql
  proxy:
    expose:
      type: internal
    replicas: 2
    type: pgbouncer
status:
  ready: 4
  size: 4
  status: ready
---
apiVersion: pgv2.percona.com/v2
kind: PerconaPGCluster
metadata:
  name: test-pg-cluster
spec:
  instances:
    - dataVolumeClaimSpec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1G
      name: instance1
      replicas: 2
  port: 5432
  proxy:
    pgBouncer:
      port: 5432
      replicas: 2
      expose:
        type: ClusterIP
  backups:
    pgbackrest:
      configuration:
      - secret:
          name: test-pg-cluster-pgbackrest-secrets
      global:
        repo1-retention-full: "1"
      repos:
      - name: repo1
        volume:
          volumeClaimSpec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 1G
status:
  pgbouncer:
    ready: 2
    size: 2
  postgres:
    instances:
    - name: instance1
      ready: 2
      size: 2
    ready: 2
    size: 2
  state: ready
